// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robogen.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robogen.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace robogenMessage {

namespace {

const ::google::protobuf::Descriptor* EvolvableParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvolvableParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* NeuralConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeuralConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Neuron_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Neuron_reflection_ = NULL;
const ::google::protobuf::Descriptor* Brain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Brain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Obstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Obstacle_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimulatorConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimulatorConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvaluationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvaluationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvaluationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvaluationResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_robogen_2eproto() {
  protobuf_AddDesc_robogen_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "robogen.proto");
  GOOGLE_CHECK(file != NULL);
  EvolvableParameter_descriptor_ = file->message_type(0);
  static const int EvolvableParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvableParameter, paramvalue_),
  };
  EvolvableParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvolvableParameter_descriptor_,
      EvolvableParameter::default_instance_,
      EvolvableParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvableParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvableParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvolvableParameter));
  BodyPart_descriptor_ = file->message_type(1);
  static const int BodyPart_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, evolvableparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, color_),
  };
  BodyPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyPart_descriptor_,
      BodyPart::default_instance_,
      BodyPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyPart));
  BodyConnection_descriptor_ = file->message_type(2);
  static const int BodyConnection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, srcslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, destslot_),
  };
  BodyConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BodyConnection_descriptor_,
      BodyConnection::default_instance_,
      BodyConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BodyConnection));
  Body_descriptor_ = file->message_type(3);
  static const int Body_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, connection_),
  };
  Body_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Body_descriptor_,
      Body::default_instance_,
      Body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Body));
  NeuralConnection_descriptor_ = file->message_type(4);
  static const int NeuralConnection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, weight_),
  };
  NeuralConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NeuralConnection_descriptor_,
      NeuralConnection::default_instance_,
      NeuralConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NeuralConnection));
  Neuron_descriptor_ = file->message_type(5);
  static const int Neuron_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, bodypartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, ioid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, phaseoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, gain_),
  };
  Neuron_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Neuron_descriptor_,
      Neuron::default_instance_,
      Neuron_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Neuron));
  Brain_descriptor_ = file->message_type(6);
  static const int Brain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, neuron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, connection_),
  };
  Brain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Brain_descriptor_,
      Brain::default_instance_,
      Brain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Brain));
  Robot_descriptor_ = file->message_type(7);
  static const int Robot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, brain_),
  };
  Robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robot_descriptor_,
      Robot::default_instance_,
      Robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robot));
  Obstacle_descriptor_ = file->message_type(8);
  static const int Obstacle_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, xsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, ysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, zsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, xrotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, yrotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, zrotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, rotationangle_),
  };
  Obstacle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Obstacle_descriptor_,
      Obstacle::default_instance_,
      Obstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Obstacle));
  StartPosition_descriptor_ = file->message_type(9);
  static const int StartPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, azimuth_),
  };
  StartPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartPosition_descriptor_,
      StartPosition::default_instance_,
      StartPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartPosition));
  SimulatorConf_descriptor_ = file->message_type(10);
  static const int SimulatorConf_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, terrainwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, terrainlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, obstacles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, scenario_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, lightsourceheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, timestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, ntimesteps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, startpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, actuationperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, terrainfriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, sensornoiselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, motornoiselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, capacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, maxlinearacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, maxangularacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, maxdirectionshiftspersecond_),
  };
  SimulatorConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimulatorConf_descriptor_,
      SimulatorConf::default_instance_,
      SimulatorConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimulatorConf));
  EvaluationRequest_descriptor_ = file->message_type(11);
  static const int EvaluationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationRequest, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationRequest, configuration_),
  };
  EvaluationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvaluationRequest_descriptor_,
      EvaluationRequest::default_instance_,
      EvaluationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvaluationRequest));
  EvaluationResult_descriptor_ = file->message_type(12);
  static const int EvaluationResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, fitness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, objectives_),
  };
  EvaluationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvaluationResult_descriptor_,
      EvaluationResult::default_instance_,
      EvaluationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvaluationResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_robogen_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvolvableParameter_descriptor_, &EvolvableParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyPart_descriptor_, &BodyPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BodyConnection_descriptor_, &BodyConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Body_descriptor_, &Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NeuralConnection_descriptor_, &NeuralConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Neuron_descriptor_, &Neuron::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Brain_descriptor_, &Brain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robot_descriptor_, &Robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Obstacle_descriptor_, &Obstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartPosition_descriptor_, &StartPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimulatorConf_descriptor_, &SimulatorConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvaluationRequest_descriptor_, &EvaluationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvaluationResult_descriptor_, &EvaluationResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_robogen_2eproto() {
  delete EvolvableParameter::default_instance_;
  delete EvolvableParameter_reflection_;
  delete BodyPart::default_instance_;
  delete BodyPart_reflection_;
  delete BodyConnection::default_instance_;
  delete BodyConnection_reflection_;
  delete Body::default_instance_;
  delete Body_reflection_;
  delete NeuralConnection::default_instance_;
  delete NeuralConnection_reflection_;
  delete Neuron::default_instance_;
  delete Neuron_reflection_;
  delete Brain::default_instance_;
  delete Brain_reflection_;
  delete Robot::default_instance_;
  delete Robot_reflection_;
  delete Obstacle::default_instance_;
  delete Obstacle_reflection_;
  delete StartPosition::default_instance_;
  delete StartPosition_reflection_;
  delete SimulatorConf::default_instance_;
  delete SimulatorConf_reflection_;
  delete EvaluationRequest::default_instance_;
  delete EvaluationRequest_reflection_;
  delete EvaluationResult::default_instance_;
  delete EvaluationResult_reflection_;
}

void protobuf_AddDesc_robogen_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrobogen.proto\022\016robogenMessage\"(\n\022Evolv"
    "ableParameter\022\022\n\nparamValue\030\001 \002(\002\"\222\001\n\010Bo"
    "dyPart\022\n\n\002id\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\014\n\004root"
    "\030\003 \002(\010\022:\n\016evolvableParam\030\004 \003(\0132\".robogen"
    "Message.EvolvableParameter\022\023\n\013orientatio"
    "n\030\005 \002(\005\022\r\n\005color\030\006 \002(\t\"N\n\016BodyConnection"
    "\022\013\n\003src\030\001 \002(\t\022\014\n\004dest\030\002 \002(\t\022\017\n\007srcSlot\030\003"
    " \002(\005\022\020\n\010destSlot\030\004 \002(\005\"b\n\004Body\022&\n\004part\030\001"
    " \003(\0132\030.robogenMessage.BodyPart\0222\n\nconnec"
    "tion\030\002 \003(\0132\036.robogenMessage.BodyConnecti"
    "on\"=\n\020NeuralConnection\022\013\n\003src\030\001 \002(\t\022\014\n\004d"
    "est\030\002 \002(\t\022\016\n\006weight\030\003 \002(\002\"\241\001\n\006Neuron\022\n\n\002"
    "id\030\001 \002(\t\022\r\n\005layer\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\022\014\n"
    "\004bias\030\004 \001(\002\022\022\n\nbodyPartId\030\005 \001(\t\022\014\n\004ioId\030"
    "\006 \001(\005\022\013\n\003tau\030\007 \001(\002\022\023\n\013phaseOffset\030\010 \001(\002\022"
    "\016\n\006period\030\t \001(\002\022\014\n\004gain\030\n \001(\002\"e\n\005Brain\022&"
    "\n\006neuron\030\001 \003(\0132\026.robogenMessage.Neuron\0224"
    "\n\nconnection\030\002 \003(\0132 .robogenMessage.Neur"
    "alConnection\"]\n\005Robot\022\n\n\002id\030\001 \002(\005\022\"\n\004bod"
    "y\030\002 \002(\0132\024.robogenMessage.Body\022$\n\005brain\030\003"
    " \002(\0132\025.robogenMessage.Brain\"\271\001\n\010Obstacle"
    "\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\r\n\005xSi"
    "ze\030\004 \002(\002\022\r\n\005ySize\030\005 \002(\002\022\r\n\005zSize\030\006 \002(\002\022\017"
    "\n\007density\030\007 \002(\002\022\021\n\txRotation\030\010 \002(\002\022\021\n\tyR"
    "otation\030\t \002(\002\022\021\n\tzRotation\030\n \002(\002\022\025\n\rrota"
    "tionAngle\030\013 \002(\002\"6\n\rStartPosition\022\t\n\001x\030\001 "
    "\002(\002\022\t\n\001y\030\002 \002(\002\022\017\n\007azimuth\030\003 \002(\002\"\325\003\n\rSimu"
    "latorConf\022\024\n\014terrainWidth\030\001 \002(\002\022\025\n\rterra"
    "inLength\030\002 \002(\002\022+\n\tobstacles\030\003 \003(\0132\030.robo"
    "genMessage.Obstacle\022\020\n\010scenario\030\004 \002(\t\022\031\n"
    "\021lightSourceHeight\030\005 \002(\002\022\020\n\010timeStep\030\006 \002"
    "(\002\022\022\n\nnTimeSteps\030\007 \002(\005\0225\n\016startPositions"
    "\030\010 \003(\0132\035.robogenMessage.StartPosition\022\027\n"
    "\017actuationPeriod\030\t \002(\005\022\027\n\017terrainFrictio"
    "n\030\n \002(\002\022\030\n\020sensorNoiseLevel\030\013 \002(\002\022\027\n\017mot"
    "orNoiseLevel\030\014 \002(\002\022\027\n\017capAcceleration\030\r "
    "\002(\010\022\035\n\025maxLinearAcceleration\030\016 \002(\002\022\036\n\026ma"
    "xAngularAcceleration\030\017 \002(\002\022#\n\033maxDirecti"
    "onShiftsPerSecond\030\020 \002(\005\"o\n\021EvaluationReq"
    "uest\022$\n\005robot\030\001 \002(\0132\025.robogenMessage.Rob"
    "ot\0224\n\rconfiguration\030\002 \002(\0132\035.robogenMessa"
    "ge.SimulatorConf\"C\n\020EvaluationResult\022\n\n\002"
    "id\030\001 \002(\005\022\017\n\007fitness\030\002 \002(\002\022\022\n\nobjectives\030"
    "\003 \003(\002", 1725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robogen.proto", &protobuf_RegisterTypes);
  EvolvableParameter::default_instance_ = new EvolvableParameter();
  BodyPart::default_instance_ = new BodyPart();
  BodyConnection::default_instance_ = new BodyConnection();
  Body::default_instance_ = new Body();
  NeuralConnection::default_instance_ = new NeuralConnection();
  Neuron::default_instance_ = new Neuron();
  Brain::default_instance_ = new Brain();
  Robot::default_instance_ = new Robot();
  Obstacle::default_instance_ = new Obstacle();
  StartPosition::default_instance_ = new StartPosition();
  SimulatorConf::default_instance_ = new SimulatorConf();
  EvaluationRequest::default_instance_ = new EvaluationRequest();
  EvaluationResult::default_instance_ = new EvaluationResult();
  EvolvableParameter::default_instance_->InitAsDefaultInstance();
  BodyPart::default_instance_->InitAsDefaultInstance();
  BodyConnection::default_instance_->InitAsDefaultInstance();
  Body::default_instance_->InitAsDefaultInstance();
  NeuralConnection::default_instance_->InitAsDefaultInstance();
  Neuron::default_instance_->InitAsDefaultInstance();
  Brain::default_instance_->InitAsDefaultInstance();
  Robot::default_instance_->InitAsDefaultInstance();
  Obstacle::default_instance_->InitAsDefaultInstance();
  StartPosition::default_instance_->InitAsDefaultInstance();
  SimulatorConf::default_instance_->InitAsDefaultInstance();
  EvaluationRequest::default_instance_->InitAsDefaultInstance();
  EvaluationResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robogen_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robogen_2eproto {
  StaticDescriptorInitializer_robogen_2eproto() {
    protobuf_AddDesc_robogen_2eproto();
  }
} static_descriptor_initializer_robogen_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EvolvableParameter::kParamValueFieldNumber;
#endif  // !_MSC_VER

EvolvableParameter::EvolvableParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.EvolvableParameter)
}

void EvolvableParameter::InitAsDefaultInstance() {
}

EvolvableParameter::EvolvableParameter(const EvolvableParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.EvolvableParameter)
}

void EvolvableParameter::SharedCtor() {
  _cached_size_ = 0;
  paramvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvolvableParameter::~EvolvableParameter() {
  // @@protoc_insertion_point(destructor:robogenMessage.EvolvableParameter)
  SharedDtor();
}

void EvolvableParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EvolvableParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvolvableParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvolvableParameter_descriptor_;
}

const EvolvableParameter& EvolvableParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

EvolvableParameter* EvolvableParameter::default_instance_ = NULL;

EvolvableParameter* EvolvableParameter::New() const {
  return new EvolvableParameter;
}

void EvolvableParameter::Clear() {
  paramvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvolvableParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.EvolvableParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float paramValue = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &paramvalue_)));
          set_has_paramvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.EvolvableParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.EvolvableParameter)
  return false;
#undef DO_
}

void EvolvableParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.EvolvableParameter)
  // required float paramValue = 1;
  if (has_paramvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->paramvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.EvolvableParameter)
}

::google::protobuf::uint8* EvolvableParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.EvolvableParameter)
  // required float paramValue = 1;
  if (has_paramvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->paramvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.EvolvableParameter)
  return target;
}

int EvolvableParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float paramValue = 1;
    if (has_paramvalue()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvolvableParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvolvableParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvolvableParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvolvableParameter::MergeFrom(const EvolvableParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paramvalue()) {
      set_paramvalue(from.paramvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvolvableParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvolvableParameter::CopyFrom(const EvolvableParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvolvableParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EvolvableParameter::Swap(EvolvableParameter* other) {
  if (other != this) {
    std::swap(paramvalue_, other->paramvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvolvableParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvolvableParameter_descriptor_;
  metadata.reflection = EvolvableParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BodyPart::kIdFieldNumber;
const int BodyPart::kTypeFieldNumber;
const int BodyPart::kRootFieldNumber;
const int BodyPart::kEvolvableParamFieldNumber;
const int BodyPart::kOrientationFieldNumber;
const int BodyPart::kColorFieldNumber;
#endif  // !_MSC_VER

BodyPart::BodyPart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.BodyPart)
}

void BodyPart::InitAsDefaultInstance() {
}

BodyPart::BodyPart(const BodyPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.BodyPart)
}

void BodyPart::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_ = false;
  orientation_ = 0;
  color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyPart::~BodyPart() {
  // @@protoc_insertion_point(destructor:robogenMessage.BodyPart)
  SharedDtor();
}

void BodyPart::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete color_;
  }
  if (this != default_instance_) {
  }
}

void BodyPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyPart_descriptor_;
}

const BodyPart& BodyPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

BodyPart* BodyPart::default_instance_ = NULL;

BodyPart* BodyPart::New() const {
  return new BodyPart;
}

void BodyPart::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BodyPart*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(root_, orientation_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_color()) {
      if (color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        color_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  evolvableparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.BodyPart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_root;
        break;
      }

      // required bool root = 3;
      case 3: {
        if (tag == 24) {
         parse_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &root_)));
          set_has_root();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_evolvableParam;
        break;
      }

      // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
      case 4: {
        if (tag == 34) {
         parse_evolvableParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_evolvableparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_evolvableParam;
        if (input->ExpectTag(40)) goto parse_orientation;
        break;
      }

      // required int32 orientation = 5;
      case 5: {
        if (tag == 40) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_color;
        break;
      }

      // required string color = 6;
      case 6: {
        if (tag == 50) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.BodyPart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.BodyPart)
  return false;
#undef DO_
}

void BodyPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.BodyPart)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required bool root = 3;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->root(), output);
  }

  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  for (int i = 0; i < this->evolvableparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->evolvableparam(i), output);
  }

  // required int32 orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->orientation(), output);
  }

  // required string color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.BodyPart)
}

::google::protobuf::uint8* BodyPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.BodyPart)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required bool root = 3;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->root(), target);
  }

  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  for (int i = 0; i < this->evolvableparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->evolvableparam(i), target);
  }

  // required int32 orientation = 5;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->orientation(), target);
  }

  // required string color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.BodyPart)
  return target;
}

int BodyPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required bool root = 3;
    if (has_root()) {
      total_size += 1 + 1;
    }

    // required int32 orientation = 5;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orientation());
    }

    // required string color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

  }
  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  total_size += 1 * this->evolvableparam_size();
  for (int i = 0; i < this->evolvableparam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evolvableparam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyPart::MergeFrom(const BodyPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  evolvableparam_.MergeFrom(from.evolvableparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_root()) {
      set_root(from.root());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyPart::CopyFrom(const BodyPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->evolvableparam())) return false;
  return true;
}

void BodyPart::Swap(BodyPart* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(root_, other->root_);
    evolvableparam_.Swap(&other->evolvableparam_);
    std::swap(orientation_, other->orientation_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyPart_descriptor_;
  metadata.reflection = BodyPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BodyConnection::kSrcFieldNumber;
const int BodyConnection::kDestFieldNumber;
const int BodyConnection::kSrcSlotFieldNumber;
const int BodyConnection::kDestSlotFieldNumber;
#endif  // !_MSC_VER

BodyConnection::BodyConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.BodyConnection)
}

void BodyConnection::InitAsDefaultInstance() {
}

BodyConnection::BodyConnection(const BodyConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.BodyConnection)
}

void BodyConnection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcslot_ = 0;
  destslot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyConnection::~BodyConnection() {
  // @@protoc_insertion_point(destructor:robogenMessage.BodyConnection)
  SharedDtor();
}

void BodyConnection::SharedDtor() {
  if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete src_;
  }
  if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_;
  }
  if (this != default_instance_) {
  }
}

void BodyConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyConnection_descriptor_;
}

const BodyConnection& BodyConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

BodyConnection* BodyConnection::default_instance_ = NULL;

BodyConnection* BodyConnection::New() const {
  return new BodyConnection;
}

void BodyConnection::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BodyConnection*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(srcslot_, destslot_);
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        src_->clear();
      }
    }
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BodyConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.BodyConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "src");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required string dest = 2;
      case 2: {
        if (tag == 18) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_srcSlot;
        break;
      }

      // required int32 srcSlot = 3;
      case 3: {
        if (tag == 24) {
         parse_srcSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcslot_)));
          set_has_srcslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_destSlot;
        break;
      }

      // required int32 destSlot = 4;
      case 4: {
        if (tag == 32) {
         parse_destSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destslot_)));
          set_has_destslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.BodyConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.BodyConnection)
  return false;
#undef DO_
}

void BodyConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.BodyConnection)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest(), output);
  }

  // required int32 srcSlot = 3;
  if (has_srcslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcslot(), output);
  }

  // required int32 destSlot = 4;
  if (has_destslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->destslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.BodyConnection)
}

::google::protobuf::uint8* BodyConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.BodyConnection)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // required int32 srcSlot = 3;
  if (has_srcslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcslot(), target);
  }

  // required int32 destSlot = 4;
  if (has_destslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->destslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.BodyConnection)
  return target;
}

int BodyConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest());
    }

    // required int32 srcSlot = 3;
    if (has_srcslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcslot());
    }

    // required int32 destSlot = 4;
    if (has_destslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BodyConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BodyConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BodyConnection::MergeFrom(const BodyConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_srcslot()) {
      set_srcslot(from.srcslot());
    }
    if (from.has_destslot()) {
      set_destslot(from.destslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BodyConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyConnection::CopyFrom(const BodyConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BodyConnection::Swap(BodyConnection* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dest_, other->dest_);
    std::swap(srcslot_, other->srcslot_);
    std::swap(destslot_, other->destslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BodyConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyConnection_descriptor_;
  metadata.reflection = BodyConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Body::kPartFieldNumber;
const int Body::kConnectionFieldNumber;
#endif  // !_MSC_VER

Body::Body()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Body)
}

void Body::InitAsDefaultInstance() {
}

Body::Body(const Body& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Body)
}

void Body::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Body::~Body() {
  // @@protoc_insertion_point(destructor:robogenMessage.Body)
  SharedDtor();
}

void Body::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Body_descriptor_;
}

const Body& Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Body* Body::default_instance_ = NULL;

Body* Body::New() const {
  return new Body;
}

void Body::Clear() {
  part_.Clear();
  connection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robogenMessage.BodyPart part = 1;
      case 1: {
        if (tag == 10) {
         parse_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_part()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_part;
        if (input->ExpectTag(18)) goto parse_connection;
        break;
      }

      // repeated .robogenMessage.BodyConnection connection = 2;
      case 2: {
        if (tag == 18) {
         parse_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_connection;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Body)
  return false;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Body)
  // repeated .robogenMessage.BodyPart part = 1;
  for (int i = 0; i < this->part_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->part(i), output);
  }

  // repeated .robogenMessage.BodyConnection connection = 2;
  for (int i = 0; i < this->connection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connection(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Body)
}

::google::protobuf::uint8* Body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Body)
  // repeated .robogenMessage.BodyPart part = 1;
  for (int i = 0; i < this->part_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->part(i), target);
  }

  // repeated .robogenMessage.BodyConnection connection = 2;
  for (int i = 0; i < this->connection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->connection(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Body)
  return target;
}

int Body::ByteSize() const {
  int total_size = 0;

  // repeated .robogenMessage.BodyPart part = 1;
  total_size += 1 * this->part_size();
  for (int i = 0; i < this->part_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->part(i));
  }

  // repeated .robogenMessage.BodyConnection connection = 2;
  total_size += 1 * this->connection_size();
  for (int i = 0; i < this->connection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connection(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Body* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Body*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
  GOOGLE_CHECK_NE(&from, this);
  part_.MergeFrom(from.part_);
  connection_.MergeFrom(from.connection_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->part())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->connection())) return false;
  return true;
}

void Body::Swap(Body* other) {
  if (other != this) {
    part_.Swap(&other->part_);
    connection_.Swap(&other->connection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Body_descriptor_;
  metadata.reflection = Body_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NeuralConnection::kSrcFieldNumber;
const int NeuralConnection::kDestFieldNumber;
const int NeuralConnection::kWeightFieldNumber;
#endif  // !_MSC_VER

NeuralConnection::NeuralConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.NeuralConnection)
}

void NeuralConnection::InitAsDefaultInstance() {
}

NeuralConnection::NeuralConnection(const NeuralConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.NeuralConnection)
}

void NeuralConnection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NeuralConnection::~NeuralConnection() {
  // @@protoc_insertion_point(destructor:robogenMessage.NeuralConnection)
  SharedDtor();
}

void NeuralConnection::SharedDtor() {
  if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete src_;
  }
  if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_;
  }
  if (this != default_instance_) {
  }
}

void NeuralConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeuralConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeuralConnection_descriptor_;
}

const NeuralConnection& NeuralConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

NeuralConnection* NeuralConnection::default_instance_ = NULL;

NeuralConnection* NeuralConnection::New() const {
  return new NeuralConnection;
}

void NeuralConnection::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        src_->clear();
      }
    }
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_->clear();
      }
    }
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NeuralConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.NeuralConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "src");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required string dest = 2;
      case 2: {
        if (tag == 18) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_weight;
        break;
      }

      // required float weight = 3;
      case 3: {
        if (tag == 29) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.NeuralConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.NeuralConnection)
  return false;
#undef DO_
}

void NeuralConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.NeuralConnection)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest(), output);
  }

  // required float weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.NeuralConnection)
}

::google::protobuf::uint8* NeuralConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.NeuralConnection)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // required float weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.NeuralConnection)
  return target;
}

int NeuralConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest());
    }

    // required float weight = 3;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeuralConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NeuralConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NeuralConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NeuralConnection::MergeFrom(const NeuralConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NeuralConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeuralConnection::CopyFrom(const NeuralConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeuralConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NeuralConnection::Swap(NeuralConnection* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dest_, other->dest_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NeuralConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeuralConnection_descriptor_;
  metadata.reflection = NeuralConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Neuron::kIdFieldNumber;
const int Neuron::kLayerFieldNumber;
const int Neuron::kTypeFieldNumber;
const int Neuron::kBiasFieldNumber;
const int Neuron::kBodyPartIdFieldNumber;
const int Neuron::kIoIdFieldNumber;
const int Neuron::kTauFieldNumber;
const int Neuron::kPhaseOffsetFieldNumber;
const int Neuron::kPeriodFieldNumber;
const int Neuron::kGainFieldNumber;
#endif  // !_MSC_VER

Neuron::Neuron()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Neuron)
}

void Neuron::InitAsDefaultInstance() {
}

Neuron::Neuron(const Neuron& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Neuron)
}

void Neuron::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bias_ = 0;
  bodypartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ioid_ = 0;
  tau_ = 0;
  phaseoffset_ = 0;
  period_ = 0;
  gain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Neuron::~Neuron() {
  // @@protoc_insertion_point(destructor:robogenMessage.Neuron)
  SharedDtor();
}

void Neuron::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (bodypartid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bodypartid_;
  }
  if (this != default_instance_) {
  }
}

void Neuron::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Neuron::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Neuron_descriptor_;
}

const Neuron& Neuron::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Neuron* Neuron::default_instance_ = NULL;

Neuron* Neuron::New() const {
  return new Neuron;
}

void Neuron::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Neuron*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bias_, phaseoffset_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_layer()) {
      if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        layer_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_bodypartid()) {
      if (bodypartid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bodypartid_->clear();
      }
    }
  }
  ZR_(period_, gain_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Neuron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Neuron)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        break;
      }

      // required string layer = 2;
      case 2: {
        if (tag == 18) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), this->layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_bias;
        break;
      }

      // optional float bias = 4;
      case 4: {
        if (tag == 37) {
         parse_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bodyPartId;
        break;
      }

      // optional string bodyPartId = 5;
      case 5: {
        if (tag == 42) {
         parse_bodyPartId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodypartid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bodypartid().data(), this->bodypartid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bodypartid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ioId;
        break;
      }

      // optional int32 ioId = 6;
      case 6: {
        if (tag == 48) {
         parse_ioId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioid_)));
          set_has_ioid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_tau;
        break;
      }

      // optional float tau = 7;
      case 7: {
        if (tag == 61) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_phaseOffset;
        break;
      }

      // optional float phaseOffset = 8;
      case 8: {
        if (tag == 69) {
         parse_phaseOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phaseoffset_)));
          set_has_phaseoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_period;
        break;
      }

      // optional float period = 9;
      case 9: {
        if (tag == 77) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_gain;
        break;
      }

      // optional float gain = 10;
      case 10: {
        if (tag == 85) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Neuron)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Neuron)
  return false;
#undef DO_
}

void Neuron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Neuron)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional float bias = 4;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bias(), output);
  }

  // optional string bodyPartId = 5;
  if (has_bodypartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodypartid().data(), this->bodypartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bodypartid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bodypartid(), output);
  }

  // optional int32 ioId = 6;
  if (has_ioid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ioid(), output);
  }

  // optional float tau = 7;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tau(), output);
  }

  // optional float phaseOffset = 8;
  if (has_phaseoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->phaseoffset(), output);
  }

  // optional float period = 9;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->period(), output);
  }

  // optional float gain = 10;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Neuron)
}

::google::protobuf::uint8* Neuron::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Neuron)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional float bias = 4;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bias(), target);
  }

  // optional string bodyPartId = 5;
  if (has_bodypartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodypartid().data(), this->bodypartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bodypartid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bodypartid(), target);
  }

  // optional int32 ioId = 6;
  if (has_ioid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ioid(), target);
  }

  // optional float tau = 7;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tau(), target);
  }

  // optional float phaseOffset = 8;
  if (has_phaseoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->phaseoffset(), target);
  }

  // optional float period = 9;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->period(), target);
  }

  // optional float gain = 10;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->gain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Neuron)
  return target;
}

int Neuron::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layer());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float bias = 4;
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // optional string bodyPartId = 5;
    if (has_bodypartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodypartid());
    }

    // optional int32 ioId = 6;
    if (has_ioid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioid());
    }

    // optional float tau = 7;
    if (has_tau()) {
      total_size += 1 + 4;
    }

    // optional float phaseOffset = 8;
    if (has_phaseoffset()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float period = 9;
    if (has_period()) {
      total_size += 1 + 4;
    }

    // optional float gain = 10;
    if (has_gain()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Neuron::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Neuron* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Neuron*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Neuron::MergeFrom(const Neuron& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
    if (from.has_bodypartid()) {
      set_bodypartid(from.bodypartid());
    }
    if (from.has_ioid()) {
      set_ioid(from.ioid());
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
    if (from.has_phaseoffset()) {
      set_phaseoffset(from.phaseoffset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Neuron::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neuron::CopyFrom(const Neuron& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neuron::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Neuron::Swap(Neuron* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(layer_, other->layer_);
    std::swap(type_, other->type_);
    std::swap(bias_, other->bias_);
    std::swap(bodypartid_, other->bodypartid_);
    std::swap(ioid_, other->ioid_);
    std::swap(tau_, other->tau_);
    std::swap(phaseoffset_, other->phaseoffset_);
    std::swap(period_, other->period_);
    std::swap(gain_, other->gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Neuron::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Neuron_descriptor_;
  metadata.reflection = Neuron_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Brain::kNeuronFieldNumber;
const int Brain::kConnectionFieldNumber;
#endif  // !_MSC_VER

Brain::Brain()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Brain)
}

void Brain::InitAsDefaultInstance() {
}

Brain::Brain(const Brain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Brain)
}

void Brain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Brain::~Brain() {
  // @@protoc_insertion_point(destructor:robogenMessage.Brain)
  SharedDtor();
}

void Brain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Brain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Brain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Brain_descriptor_;
}

const Brain& Brain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Brain* Brain::default_instance_ = NULL;

Brain* Brain::New() const {
  return new Brain;
}

void Brain::Clear() {
  neuron_.Clear();
  connection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Brain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Brain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robogenMessage.Neuron neuron = 1;
      case 1: {
        if (tag == 10) {
         parse_neuron:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_neuron()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_neuron;
        if (input->ExpectTag(18)) goto parse_connection;
        break;
      }

      // repeated .robogenMessage.NeuralConnection connection = 2;
      case 2: {
        if (tag == 18) {
         parse_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_connection;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Brain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Brain)
  return false;
#undef DO_
}

void Brain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Brain)
  // repeated .robogenMessage.Neuron neuron = 1;
  for (int i = 0; i < this->neuron_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->neuron(i), output);
  }

  // repeated .robogenMessage.NeuralConnection connection = 2;
  for (int i = 0; i < this->connection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connection(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Brain)
}

::google::protobuf::uint8* Brain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Brain)
  // repeated .robogenMessage.Neuron neuron = 1;
  for (int i = 0; i < this->neuron_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->neuron(i), target);
  }

  // repeated .robogenMessage.NeuralConnection connection = 2;
  for (int i = 0; i < this->connection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->connection(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Brain)
  return target;
}

int Brain::ByteSize() const {
  int total_size = 0;

  // repeated .robogenMessage.Neuron neuron = 1;
  total_size += 1 * this->neuron_size();
  for (int i = 0; i < this->neuron_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->neuron(i));
  }

  // repeated .robogenMessage.NeuralConnection connection = 2;
  total_size += 1 * this->connection_size();
  for (int i = 0; i < this->connection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connection(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Brain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Brain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Brain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Brain::MergeFrom(const Brain& from) {
  GOOGLE_CHECK_NE(&from, this);
  neuron_.MergeFrom(from.neuron_);
  connection_.MergeFrom(from.connection_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Brain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brain::CopyFrom(const Brain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brain::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->neuron())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->connection())) return false;
  return true;
}

void Brain::Swap(Brain* other) {
  if (other != this) {
    neuron_.Swap(&other->neuron_);
    connection_.Swap(&other->connection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Brain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Brain_descriptor_;
  metadata.reflection = Brain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Robot::kIdFieldNumber;
const int Robot::kBodyFieldNumber;
const int Robot::kBrainFieldNumber;
#endif  // !_MSC_VER

Robot::Robot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Robot)
}

void Robot::InitAsDefaultInstance() {
  body_ = const_cast< ::robogenMessage::Body*>(&::robogenMessage::Body::default_instance());
  brain_ = const_cast< ::robogenMessage::Brain*>(&::robogenMessage::Brain::default_instance());
}

Robot::Robot(const Robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Robot)
}

void Robot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  body_ = NULL;
  brain_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:robogenMessage.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != default_instance_) {
    delete body_;
    delete brain_;
  }
}

void Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_descriptor_;
}

const Robot& Robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Robot* Robot::default_instance_ = NULL;

Robot* Robot::New() const {
  return new Robot;
}

void Robot::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    if (has_body()) {
      if (body_ != NULL) body_->::robogenMessage::Body::Clear();
    }
    if (has_brain()) {
      if (brain_ != NULL) brain_->::robogenMessage::Brain::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Robot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .robogenMessage.Body body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_brain;
        break;
      }

      // required .robogenMessage.Brain brain = 3;
      case 3: {
        if (tag == 26) {
         parse_brain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Robot)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .robogenMessage.Body body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  // required .robogenMessage.Brain brain = 3;
  if (has_brain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->brain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Robot)
}

::google::protobuf::uint8* Robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Robot)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .robogenMessage.Body body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  // required .robogenMessage.Brain brain = 3;
  if (has_brain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->brain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Robot)
  return target;
}

int Robot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .robogenMessage.Body body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

    // required .robogenMessage.Brain brain = 3;
    if (has_brain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_body()) {
      mutable_body()->::robogenMessage::Body::MergeFrom(from.body());
    }
    if (from.has_brain()) {
      mutable_brain()->::robogenMessage::Brain::MergeFrom(from.brain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  if (has_brain()) {
    if (!this->brain().IsInitialized()) return false;
  }
  return true;
}

void Robot::Swap(Robot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(body_, other->body_);
    std::swap(brain_, other->brain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_descriptor_;
  metadata.reflection = Robot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Obstacle::kXFieldNumber;
const int Obstacle::kYFieldNumber;
const int Obstacle::kZFieldNumber;
const int Obstacle::kXSizeFieldNumber;
const int Obstacle::kYSizeFieldNumber;
const int Obstacle::kZSizeFieldNumber;
const int Obstacle::kDensityFieldNumber;
const int Obstacle::kXRotationFieldNumber;
const int Obstacle::kYRotationFieldNumber;
const int Obstacle::kZRotationFieldNumber;
const int Obstacle::kRotationAngleFieldNumber;
#endif  // !_MSC_VER

Obstacle::Obstacle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Obstacle)
}

void Obstacle::InitAsDefaultInstance() {
}

Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Obstacle)
}

void Obstacle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  xsize_ = 0;
  ysize_ = 0;
  zsize_ = 0;
  density_ = 0;
  xrotation_ = 0;
  yrotation_ = 0;
  zrotation_ = 0;
  rotationangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:robogenMessage.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Obstacle_descriptor_;
}

const Obstacle& Obstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Obstacle* Obstacle::default_instance_ = NULL;

Obstacle* Obstacle::New() const {
  return new Obstacle;
}

void Obstacle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Obstacle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, xrotation_);
  }
  ZR_(yrotation_, rotationangle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Obstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_xSize;
        break;
      }

      // required float xSize = 4;
      case 4: {
        if (tag == 37) {
         parse_xSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xsize_)));
          set_has_xsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_ySize;
        break;
      }

      // required float ySize = 5;
      case 5: {
        if (tag == 45) {
         parse_ySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ysize_)));
          set_has_ysize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_zSize;
        break;
      }

      // required float zSize = 6;
      case 6: {
        if (tag == 53) {
         parse_zSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zsize_)));
          set_has_zsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_density;
        break;
      }

      // required float density = 7;
      case 7: {
        if (tag == 61) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_xRotation;
        break;
      }

      // required float xRotation = 8;
      case 8: {
        if (tag == 69) {
         parse_xRotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xrotation_)));
          set_has_xrotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_yRotation;
        break;
      }

      // required float yRotation = 9;
      case 9: {
        if (tag == 77) {
         parse_yRotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yrotation_)));
          set_has_yrotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_zRotation;
        break;
      }

      // required float zRotation = 10;
      case 10: {
        if (tag == 85) {
         parse_zRotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zrotation_)));
          set_has_zrotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_rotationAngle;
        break;
      }

      // required float rotationAngle = 11;
      case 11: {
        if (tag == 93) {
         parse_rotationAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationangle_)));
          set_has_rotationangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Obstacle)
  return false;
#undef DO_
}

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Obstacle)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float xSize = 4;
  if (has_xsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->xsize(), output);
  }

  // required float ySize = 5;
  if (has_ysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ysize(), output);
  }

  // required float zSize = 6;
  if (has_zsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->zsize(), output);
  }

  // required float density = 7;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->density(), output);
  }

  // required float xRotation = 8;
  if (has_xrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->xrotation(), output);
  }

  // required float yRotation = 9;
  if (has_yrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->yrotation(), output);
  }

  // required float zRotation = 10;
  if (has_zrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->zrotation(), output);
  }

  // required float rotationAngle = 11;
  if (has_rotationangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->rotationangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Obstacle)
}

::google::protobuf::uint8* Obstacle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Obstacle)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float xSize = 4;
  if (has_xsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->xsize(), target);
  }

  // required float ySize = 5;
  if (has_ysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ysize(), target);
  }

  // required float zSize = 6;
  if (has_zsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->zsize(), target);
  }

  // required float density = 7;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->density(), target);
  }

  // required float xRotation = 8;
  if (has_xrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->xrotation(), target);
  }

  // required float yRotation = 9;
  if (has_yrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->yrotation(), target);
  }

  // required float zRotation = 10;
  if (has_zrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->zrotation(), target);
  }

  // required float rotationAngle = 11;
  if (has_rotationangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->rotationangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Obstacle)
  return target;
}

int Obstacle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // required float xSize = 4;
    if (has_xsize()) {
      total_size += 1 + 4;
    }

    // required float ySize = 5;
    if (has_ysize()) {
      total_size += 1 + 4;
    }

    // required float zSize = 6;
    if (has_zsize()) {
      total_size += 1 + 4;
    }

    // required float density = 7;
    if (has_density()) {
      total_size += 1 + 4;
    }

    // required float xRotation = 8;
    if (has_xrotation()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float yRotation = 9;
    if (has_yrotation()) {
      total_size += 1 + 4;
    }

    // required float zRotation = 10;
    if (has_zrotation()) {
      total_size += 1 + 4;
    }

    // required float rotationAngle = 11;
    if (has_rotationangle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Obstacle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Obstacle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_xsize()) {
      set_xsize(from.xsize());
    }
    if (from.has_ysize()) {
      set_ysize(from.ysize());
    }
    if (from.has_zsize()) {
      set_zsize(from.zsize());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_xrotation()) {
      set_xrotation(from.xrotation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yrotation()) {
      set_yrotation(from.yrotation());
    }
    if (from.has_zrotation()) {
      set_zrotation(from.zrotation());
    }
    if (from.has_rotationangle()) {
      set_rotationangle(from.rotationangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(xsize_, other->xsize_);
    std::swap(ysize_, other->ysize_);
    std::swap(zsize_, other->zsize_);
    std::swap(density_, other->density_);
    std::swap(xrotation_, other->xrotation_);
    std::swap(yrotation_, other->yrotation_);
    std::swap(zrotation_, other->zrotation_);
    std::swap(rotationangle_, other->rotationangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Obstacle_descriptor_;
  metadata.reflection = Obstacle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartPosition::kXFieldNumber;
const int StartPosition::kYFieldNumber;
const int StartPosition::kAzimuthFieldNumber;
#endif  // !_MSC_VER

StartPosition::StartPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.StartPosition)
}

void StartPosition::InitAsDefaultInstance() {
}

StartPosition::StartPosition(const StartPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.StartPosition)
}

void StartPosition::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  azimuth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartPosition::~StartPosition() {
  // @@protoc_insertion_point(destructor:robogenMessage.StartPosition)
  SharedDtor();
}

void StartPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartPosition_descriptor_;
}

const StartPosition& StartPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

StartPosition* StartPosition::default_instance_ = NULL;

StartPosition* StartPosition::New() const {
  return new StartPosition;
}

void StartPosition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartPosition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, azimuth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.StartPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_azimuth;
        break;
      }

      // required float azimuth = 3;
      case 3: {
        if (tag == 29) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.StartPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.StartPosition)
  return false;
#undef DO_
}

void StartPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.StartPosition)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float azimuth = 3;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->azimuth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.StartPosition)
}

::google::protobuf::uint8* StartPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.StartPosition)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float azimuth = 3;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->azimuth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.StartPosition)
  return target;
}

int StartPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float azimuth = 3;
    if (has_azimuth()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartPosition::MergeFrom(const StartPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPosition::CopyFrom(const StartPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StartPosition::Swap(StartPosition* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartPosition_descriptor_;
  metadata.reflection = StartPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimulatorConf::kTerrainWidthFieldNumber;
const int SimulatorConf::kTerrainLengthFieldNumber;
const int SimulatorConf::kObstaclesFieldNumber;
const int SimulatorConf::kScenarioFieldNumber;
const int SimulatorConf::kLightSourceHeightFieldNumber;
const int SimulatorConf::kTimeStepFieldNumber;
const int SimulatorConf::kNTimeStepsFieldNumber;
const int SimulatorConf::kStartPositionsFieldNumber;
const int SimulatorConf::kActuationPeriodFieldNumber;
const int SimulatorConf::kTerrainFrictionFieldNumber;
const int SimulatorConf::kSensorNoiseLevelFieldNumber;
const int SimulatorConf::kMotorNoiseLevelFieldNumber;
const int SimulatorConf::kCapAccelerationFieldNumber;
const int SimulatorConf::kMaxLinearAccelerationFieldNumber;
const int SimulatorConf::kMaxAngularAccelerationFieldNumber;
const int SimulatorConf::kMaxDirectionShiftsPerSecondFieldNumber;
#endif  // !_MSC_VER

SimulatorConf::SimulatorConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.SimulatorConf)
}

void SimulatorConf::InitAsDefaultInstance() {
}

SimulatorConf::SimulatorConf(const SimulatorConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.SimulatorConf)
}

void SimulatorConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  terrainwidth_ = 0;
  terrainlength_ = 0;
  scenario_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lightsourceheight_ = 0;
  timestep_ = 0;
  ntimesteps_ = 0;
  actuationperiod_ = 0;
  terrainfriction_ = 0;
  sensornoiselevel_ = 0;
  motornoiselevel_ = 0;
  capacceleration_ = false;
  maxlinearacceleration_ = 0;
  maxangularacceleration_ = 0;
  maxdirectionshiftspersecond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimulatorConf::~SimulatorConf() {
  // @@protoc_insertion_point(destructor:robogenMessage.SimulatorConf)
  SharedDtor();
}

void SimulatorConf::SharedDtor() {
  if (scenario_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenario_;
  }
  if (this != default_instance_) {
  }
}

void SimulatorConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimulatorConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimulatorConf_descriptor_;
}

const SimulatorConf& SimulatorConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

SimulatorConf* SimulatorConf::default_instance_ = NULL;

SimulatorConf* SimulatorConf::New() const {
  return new SimulatorConf;
}

void SimulatorConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SimulatorConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(terrainwidth_, terrainlength_);
    ZR_(lightsourceheight_, timestep_);
    if (has_scenario()) {
      if (scenario_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenario_->clear();
      }
    }
    ntimesteps_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(actuationperiod_, maxdirectionshiftspersecond_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  obstacles_.Clear();
  startpositions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimulatorConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.SimulatorConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float terrainWidth = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainwidth_)));
          set_has_terrainwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_terrainLength;
        break;
      }

      // required float terrainLength = 2;
      case 2: {
        if (tag == 21) {
         parse_terrainLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainlength_)));
          set_has_terrainlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_obstacles;
        break;
      }

      // repeated .robogenMessage.Obstacle obstacles = 3;
      case 3: {
        if (tag == 26) {
         parse_obstacles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_obstacles;
        if (input->ExpectTag(34)) goto parse_scenario;
        break;
      }

      // required string scenario = 4;
      case 4: {
        if (tag == 34) {
         parse_scenario:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenario()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenario().data(), this->scenario().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenario");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_lightSourceHeight;
        break;
      }

      // required float lightSourceHeight = 5;
      case 5: {
        if (tag == 45) {
         parse_lightSourceHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lightsourceheight_)));
          set_has_lightsourceheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_timeStep;
        break;
      }

      // required float timeStep = 6;
      case 6: {
        if (tag == 53) {
         parse_timeStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestep_)));
          set_has_timestep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nTimeSteps;
        break;
      }

      // required int32 nTimeSteps = 7;
      case 7: {
        if (tag == 56) {
         parse_nTimeSteps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntimesteps_)));
          set_has_ntimesteps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_startPositions;
        break;
      }

      // repeated .robogenMessage.StartPosition startPositions = 8;
      case 8: {
        if (tag == 66) {
         parse_startPositions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_startpositions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_startPositions;
        if (input->ExpectTag(72)) goto parse_actuationPeriod;
        break;
      }

      // required int32 actuationPeriod = 9;
      case 9: {
        if (tag == 72) {
         parse_actuationPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actuationperiod_)));
          set_has_actuationperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_terrainFriction;
        break;
      }

      // required float terrainFriction = 10;
      case 10: {
        if (tag == 85) {
         parse_terrainFriction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainfriction_)));
          set_has_terrainfriction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_sensorNoiseLevel;
        break;
      }

      // required float sensorNoiseLevel = 11;
      case 11: {
        if (tag == 93) {
         parse_sensorNoiseLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensornoiselevel_)));
          set_has_sensornoiselevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_motorNoiseLevel;
        break;
      }

      // required float motorNoiseLevel = 12;
      case 12: {
        if (tag == 101) {
         parse_motorNoiseLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motornoiselevel_)));
          set_has_motornoiselevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_capAcceleration;
        break;
      }

      // required bool capAcceleration = 13;
      case 13: {
        if (tag == 104) {
         parse_capAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &capacceleration_)));
          set_has_capacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_maxLinearAcceleration;
        break;
      }

      // required float maxLinearAcceleration = 14;
      case 14: {
        if (tag == 117) {
         parse_maxLinearAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxlinearacceleration_)));
          set_has_maxlinearacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_maxAngularAcceleration;
        break;
      }

      // required float maxAngularAcceleration = 15;
      case 15: {
        if (tag == 125) {
         parse_maxAngularAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxangularacceleration_)));
          set_has_maxangularacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_maxDirectionShiftsPerSecond;
        break;
      }

      // required int32 maxDirectionShiftsPerSecond = 16;
      case 16: {
        if (tag == 128) {
         parse_maxDirectionShiftsPerSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxdirectionshiftspersecond_)));
          set_has_maxdirectionshiftspersecond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.SimulatorConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.SimulatorConf)
  return false;
#undef DO_
}

void SimulatorConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.SimulatorConf)
  // required float terrainWidth = 1;
  if (has_terrainwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->terrainwidth(), output);
  }

  // required float terrainLength = 2;
  if (has_terrainlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->terrainlength(), output);
  }

  // repeated .robogenMessage.Obstacle obstacles = 3;
  for (int i = 0; i < this->obstacles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obstacles(i), output);
  }

  // required string scenario = 4;
  if (has_scenario()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario().data(), this->scenario().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenario");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->scenario(), output);
  }

  // required float lightSourceHeight = 5;
  if (has_lightsourceheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lightsourceheight(), output);
  }

  // required float timeStep = 6;
  if (has_timestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->timestep(), output);
  }

  // required int32 nTimeSteps = 7;
  if (has_ntimesteps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ntimesteps(), output);
  }

  // repeated .robogenMessage.StartPosition startPositions = 8;
  for (int i = 0; i < this->startpositions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->startpositions(i), output);
  }

  // required int32 actuationPeriod = 9;
  if (has_actuationperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->actuationperiod(), output);
  }

  // required float terrainFriction = 10;
  if (has_terrainfriction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->terrainfriction(), output);
  }

  // required float sensorNoiseLevel = 11;
  if (has_sensornoiselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->sensornoiselevel(), output);
  }

  // required float motorNoiseLevel = 12;
  if (has_motornoiselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->motornoiselevel(), output);
  }

  // required bool capAcceleration = 13;
  if (has_capacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->capacceleration(), output);
  }

  // required float maxLinearAcceleration = 14;
  if (has_maxlinearacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->maxlinearacceleration(), output);
  }

  // required float maxAngularAcceleration = 15;
  if (has_maxangularacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->maxangularacceleration(), output);
  }

  // required int32 maxDirectionShiftsPerSecond = 16;
  if (has_maxdirectionshiftspersecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->maxdirectionshiftspersecond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.SimulatorConf)
}

::google::protobuf::uint8* SimulatorConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.SimulatorConf)
  // required float terrainWidth = 1;
  if (has_terrainwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->terrainwidth(), target);
  }

  // required float terrainLength = 2;
  if (has_terrainlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->terrainlength(), target);
  }

  // repeated .robogenMessage.Obstacle obstacles = 3;
  for (int i = 0; i < this->obstacles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obstacles(i), target);
  }

  // required string scenario = 4;
  if (has_scenario()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario().data(), this->scenario().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenario");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->scenario(), target);
  }

  // required float lightSourceHeight = 5;
  if (has_lightsourceheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lightsourceheight(), target);
  }

  // required float timeStep = 6;
  if (has_timestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->timestep(), target);
  }

  // required int32 nTimeSteps = 7;
  if (has_ntimesteps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ntimesteps(), target);
  }

  // repeated .robogenMessage.StartPosition startPositions = 8;
  for (int i = 0; i < this->startpositions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->startpositions(i), target);
  }

  // required int32 actuationPeriod = 9;
  if (has_actuationperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->actuationperiod(), target);
  }

  // required float terrainFriction = 10;
  if (has_terrainfriction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->terrainfriction(), target);
  }

  // required float sensorNoiseLevel = 11;
  if (has_sensornoiselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->sensornoiselevel(), target);
  }

  // required float motorNoiseLevel = 12;
  if (has_motornoiselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->motornoiselevel(), target);
  }

  // required bool capAcceleration = 13;
  if (has_capacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->capacceleration(), target);
  }

  // required float maxLinearAcceleration = 14;
  if (has_maxlinearacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->maxlinearacceleration(), target);
  }

  // required float maxAngularAcceleration = 15;
  if (has_maxangularacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->maxangularacceleration(), target);
  }

  // required int32 maxDirectionShiftsPerSecond = 16;
  if (has_maxdirectionshiftspersecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->maxdirectionshiftspersecond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.SimulatorConf)
  return target;
}

int SimulatorConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float terrainWidth = 1;
    if (has_terrainwidth()) {
      total_size += 1 + 4;
    }

    // required float terrainLength = 2;
    if (has_terrainlength()) {
      total_size += 1 + 4;
    }

    // required string scenario = 4;
    if (has_scenario()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenario());
    }

    // required float lightSourceHeight = 5;
    if (has_lightsourceheight()) {
      total_size += 1 + 4;
    }

    // required float timeStep = 6;
    if (has_timestep()) {
      total_size += 1 + 4;
    }

    // required int32 nTimeSteps = 7;
    if (has_ntimesteps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntimesteps());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 actuationPeriod = 9;
    if (has_actuationperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actuationperiod());
    }

    // required float terrainFriction = 10;
    if (has_terrainfriction()) {
      total_size += 1 + 4;
    }

    // required float sensorNoiseLevel = 11;
    if (has_sensornoiselevel()) {
      total_size += 1 + 4;
    }

    // required float motorNoiseLevel = 12;
    if (has_motornoiselevel()) {
      total_size += 1 + 4;
    }

    // required bool capAcceleration = 13;
    if (has_capacceleration()) {
      total_size += 1 + 1;
    }

    // required float maxLinearAcceleration = 14;
    if (has_maxlinearacceleration()) {
      total_size += 1 + 4;
    }

    // required float maxAngularAcceleration = 15;
    if (has_maxangularacceleration()) {
      total_size += 1 + 4;
    }

    // required int32 maxDirectionShiftsPerSecond = 16;
    if (has_maxdirectionshiftspersecond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxdirectionshiftspersecond());
    }

  }
  // repeated .robogenMessage.Obstacle obstacles = 3;
  total_size += 1 * this->obstacles_size();
  for (int i = 0; i < this->obstacles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacles(i));
  }

  // repeated .robogenMessage.StartPosition startPositions = 8;
  total_size += 1 * this->startpositions_size();
  for (int i = 0; i < this->startpositions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->startpositions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimulatorConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimulatorConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimulatorConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimulatorConf::MergeFrom(const SimulatorConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  obstacles_.MergeFrom(from.obstacles_);
  startpositions_.MergeFrom(from.startpositions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terrainwidth()) {
      set_terrainwidth(from.terrainwidth());
    }
    if (from.has_terrainlength()) {
      set_terrainlength(from.terrainlength());
    }
    if (from.has_scenario()) {
      set_scenario(from.scenario());
    }
    if (from.has_lightsourceheight()) {
      set_lightsourceheight(from.lightsourceheight());
    }
    if (from.has_timestep()) {
      set_timestep(from.timestep());
    }
    if (from.has_ntimesteps()) {
      set_ntimesteps(from.ntimesteps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_actuationperiod()) {
      set_actuationperiod(from.actuationperiod());
    }
    if (from.has_terrainfriction()) {
      set_terrainfriction(from.terrainfriction());
    }
    if (from.has_sensornoiselevel()) {
      set_sensornoiselevel(from.sensornoiselevel());
    }
    if (from.has_motornoiselevel()) {
      set_motornoiselevel(from.motornoiselevel());
    }
    if (from.has_capacceleration()) {
      set_capacceleration(from.capacceleration());
    }
    if (from.has_maxlinearacceleration()) {
      set_maxlinearacceleration(from.maxlinearacceleration());
    }
    if (from.has_maxangularacceleration()) {
      set_maxangularacceleration(from.maxangularacceleration());
    }
    if (from.has_maxdirectionshiftspersecond()) {
      set_maxdirectionshiftspersecond(from.maxdirectionshiftspersecond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimulatorConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorConf::CopyFrom(const SimulatorConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ff7b) != 0x0000ff7b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->obstacles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->startpositions())) return false;
  return true;
}

void SimulatorConf::Swap(SimulatorConf* other) {
  if (other != this) {
    std::swap(terrainwidth_, other->terrainwidth_);
    std::swap(terrainlength_, other->terrainlength_);
    obstacles_.Swap(&other->obstacles_);
    std::swap(scenario_, other->scenario_);
    std::swap(lightsourceheight_, other->lightsourceheight_);
    std::swap(timestep_, other->timestep_);
    std::swap(ntimesteps_, other->ntimesteps_);
    startpositions_.Swap(&other->startpositions_);
    std::swap(actuationperiod_, other->actuationperiod_);
    std::swap(terrainfriction_, other->terrainfriction_);
    std::swap(sensornoiselevel_, other->sensornoiselevel_);
    std::swap(motornoiselevel_, other->motornoiselevel_);
    std::swap(capacceleration_, other->capacceleration_);
    std::swap(maxlinearacceleration_, other->maxlinearacceleration_);
    std::swap(maxangularacceleration_, other->maxangularacceleration_);
    std::swap(maxdirectionshiftspersecond_, other->maxdirectionshiftspersecond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimulatorConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimulatorConf_descriptor_;
  metadata.reflection = SimulatorConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EvaluationRequest::kRobotFieldNumber;
const int EvaluationRequest::kConfigurationFieldNumber;
#endif  // !_MSC_VER

EvaluationRequest::EvaluationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.EvaluationRequest)
}

void EvaluationRequest::InitAsDefaultInstance() {
  robot_ = const_cast< ::robogenMessage::Robot*>(&::robogenMessage::Robot::default_instance());
  configuration_ = const_cast< ::robogenMessage::SimulatorConf*>(&::robogenMessage::SimulatorConf::default_instance());
}

EvaluationRequest::EvaluationRequest(const EvaluationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.EvaluationRequest)
}

void EvaluationRequest::SharedCtor() {
  _cached_size_ = 0;
  robot_ = NULL;
  configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvaluationRequest::~EvaluationRequest() {
  // @@protoc_insertion_point(destructor:robogenMessage.EvaluationRequest)
  SharedDtor();
}

void EvaluationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete robot_;
    delete configuration_;
  }
}

void EvaluationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvaluationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvaluationRequest_descriptor_;
}

const EvaluationRequest& EvaluationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

EvaluationRequest* EvaluationRequest::default_instance_ = NULL;

EvaluationRequest* EvaluationRequest::New() const {
  return new EvaluationRequest;
}

void EvaluationRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_robot()) {
      if (robot_ != NULL) robot_->::robogenMessage::Robot::Clear();
    }
    if (has_configuration()) {
      if (configuration_ != NULL) configuration_->::robogenMessage::SimulatorConf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvaluationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.EvaluationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .robogenMessage.Robot robot = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_configuration;
        break;
      }

      // required .robogenMessage.SimulatorConf configuration = 2;
      case 2: {
        if (tag == 18) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.EvaluationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.EvaluationRequest)
  return false;
#undef DO_
}

void EvaluationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.EvaluationRequest)
  // required .robogenMessage.Robot robot = 1;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robot(), output);
  }

  // required .robogenMessage.SimulatorConf configuration = 2;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->configuration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.EvaluationRequest)
}

::google::protobuf::uint8* EvaluationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.EvaluationRequest)
  // required .robogenMessage.Robot robot = 1;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robot(), target);
  }

  // required .robogenMessage.SimulatorConf configuration = 2;
  if (has_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->configuration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.EvaluationRequest)
  return target;
}

int EvaluationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .robogenMessage.Robot robot = 1;
    if (has_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robot());
    }

    // required .robogenMessage.SimulatorConf configuration = 2;
    if (has_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configuration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvaluationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvaluationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvaluationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvaluationRequest::MergeFrom(const EvaluationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot()) {
      mutable_robot()->::robogenMessage::Robot::MergeFrom(from.robot());
    }
    if (from.has_configuration()) {
      mutable_configuration()->::robogenMessage::SimulatorConf::MergeFrom(from.configuration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvaluationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluationRequest::CopyFrom(const EvaluationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_robot()) {
    if (!this->robot().IsInitialized()) return false;
  }
  if (has_configuration()) {
    if (!this->configuration().IsInitialized()) return false;
  }
  return true;
}

void EvaluationRequest::Swap(EvaluationRequest* other) {
  if (other != this) {
    std::swap(robot_, other->robot_);
    std::swap(configuration_, other->configuration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvaluationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvaluationRequest_descriptor_;
  metadata.reflection = EvaluationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EvaluationResult::kIdFieldNumber;
const int EvaluationResult::kFitnessFieldNumber;
const int EvaluationResult::kObjectivesFieldNumber;
#endif  // !_MSC_VER

EvaluationResult::EvaluationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.EvaluationResult)
}

void EvaluationResult::InitAsDefaultInstance() {
}

EvaluationResult::EvaluationResult(const EvaluationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.EvaluationResult)
}

void EvaluationResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  fitness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvaluationResult::~EvaluationResult() {
  // @@protoc_insertion_point(destructor:robogenMessage.EvaluationResult)
  SharedDtor();
}

void EvaluationResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EvaluationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvaluationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvaluationResult_descriptor_;
}

const EvaluationResult& EvaluationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

EvaluationResult* EvaluationResult::default_instance_ = NULL;

EvaluationResult* EvaluationResult::New() const {
  return new EvaluationResult;
}

void EvaluationResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EvaluationResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, fitness_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  objectives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvaluationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.EvaluationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_fitness;
        break;
      }

      // required float fitness = 2;
      case 2: {
        if (tag == 21) {
         parse_fitness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fitness_)));
          set_has_fitness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_objectives;
        break;
      }

      // repeated float objectives = 3;
      case 3: {
        if (tag == 29) {
         parse_objectives:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_objectives())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_objectives())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_objectives;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.EvaluationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.EvaluationResult)
  return false;
#undef DO_
}

void EvaluationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.EvaluationResult)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float fitness = 2;
  if (has_fitness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fitness(), output);
  }

  // repeated float objectives = 3;
  for (int i = 0; i < this->objectives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->objectives(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.EvaluationResult)
}

::google::protobuf::uint8* EvaluationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.EvaluationResult)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float fitness = 2;
  if (has_fitness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fitness(), target);
  }

  // repeated float objectives = 3;
  for (int i = 0; i < this->objectives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->objectives(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.EvaluationResult)
  return target;
}

int EvaluationResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float fitness = 2;
    if (has_fitness()) {
      total_size += 1 + 4;
    }

  }
  // repeated float objectives = 3;
  {
    int data_size = 0;
    data_size = 4 * this->objectives_size();
    total_size += 1 * this->objectives_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvaluationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvaluationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvaluationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvaluationResult::MergeFrom(const EvaluationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectives_.MergeFrom(from.objectives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fitness()) {
      set_fitness(from.fitness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvaluationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluationResult::CopyFrom(const EvaluationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EvaluationResult::Swap(EvaluationResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fitness_, other->fitness_);
    objectives_.Swap(&other->objectives_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvaluationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvaluationResult_descriptor_;
  metadata.reflection = EvaluationResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace robogenMessage

// @@protoc_insertion_point(global_scope)
